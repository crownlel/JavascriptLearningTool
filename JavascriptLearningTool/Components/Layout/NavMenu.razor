@inherits LayoutComponentBase


<Sidebar @ref="sidebar"
         IconName="IconName.FileTypeJs"
         Title="Javascript Learning Tool"
         DataProvider="SidebarDataProviderAsync" />


@code {
    private Sidebar sidebar = default!;
    private IEnumerable<NavItem> navItems = default!;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private async Task<SidebarDataProviderResult> SidebarDataProviderAsync(SidebarDataProviderRequest request)
    {

        if (navItems is null)
        {
            var isAuthenticated = await authenticationState.IsAuthenticatedAsync();
            if(isAuthenticated)
            {
                navItems = GetAutorizedNavItems();
            }
            else
            {
                navItems = GetUnautorizedNavItems();
            }
        }

        return request.ApplyTo(navItems);
    }

    private IEnumerable<NavItem> GetAutorizedNavItems()
    {
        navItems = new List<NavItem>
        {
            new NavItem { Id = "1", Href = "/", IconName = IconName.HouseDoorFill, Text = "Home", Match=NavLinkMatch.All},
            new NavItem { Id = "2", Href = "/courses", IconName = IconName.MortarboardFill, Text = "Courses"},
            new NavItem { Id = "3", Href = "/stats", IconName = IconName.BarChartFill, Text = "Stats"},
            new NavItem { Id = "4", Href = "/tests", IconName = IconName.UiRadios, Text = "Tests"},
        };

        return navItems;
    }

    private IEnumerable<NavItem> GetUnautorizedNavItems()
    {
        navItems = new List<NavItem>
        {
            new NavItem { Id = "1", Href = "/login", IconName = IconName.Person, Text = "Login", Match=NavLinkMatch.All},
        };

        return navItems;
    }
}