<!-- Pages/CourseDetail.razor -->
@page "/course-details/{courseId:int}"
@rendermode InteractiveServer

<h3>@course?.Name</h3>

@if (course != null)
{
    <div>
        <p>@pageContent</p>
        <button class="btn btn-primary" @onclick="PreviousPageAsync" disabled="@(currentPageId <= 1)">Previous</button>
        Current Page: @currentPageId
        <button class="btn btn-primary" @onclick="NextPageAsync" disabled="@(currentPageId >= course?.Pages)">Next</button>
    </div>
}

@code {
    [Inject]
    private ApiService ApiService { get; set; }

    [Parameter]
    public int CourseId { get; set; }

    private Course course = null;
    private MarkupString? pageContent;
    private int currentPageId = 0;

    protected override async Task OnParametersSetAsync()
    {
        var crs = await ApiService.GetCourseByIdAsync(CourseId);
        if (crs != null)
        {
            currentPageId = crs.CurrentPage;
            await LoadPageAsync();
            course = crs;
        }
    }

    private async Task LoadPageAsync()
    {
        pageContent = new MarkupString("<p><em>Loading...</em></p>");
        var page = await ApiService.GetCoursePageAsync(CourseId, currentPageId);
        pageContent = page?.Content != null ? new MarkupString(page.Content) : null;
    }

    private async Task NextPageAsync()
    {
        if (currentPageId < course.Pages)
        {
            currentPageId++;
            await LoadPageAsync();
        }
    }

    private async Task PreviousPageAsync()
    {
        if (currentPageId > 1)
        {
            currentPageId--;
            await LoadPageAsync();
        }
    }
}
