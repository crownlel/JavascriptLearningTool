<!-- Pages/CourseDetail.razor -->
@page "/course-details/{courseId:int}"
@rendermode InteractiveServer
@implements IDisposable

<h3>@course?.Name</h3>

@if (course != null)
{
    <div>
        @if (pageContent != null)
        {
            <p>@pageContent</p>
        }
        else
        {
            <Spinner Color="SpinnerColor.Primary" />
        }

    </div>
    <div style="position: fixed; bottom: 30px;">
        <Pagination ActivePageNumber="@currentPageId" TotalPages="@course.Pages" PageChanged="OnPageChangedAsync"
                    DisplayPages="3"
                    FirstLinkIcon="IconName.ChevronDoubleLeft"
                    PreviousLinkIcon="IconName.ChevronLeft"
                    NextLinkIcon="IconName.ChevronRight"
                    LastLinkIcon="IconName.ChevronDoubleRight" />
    </div>
}

@code {
    [Inject]
    private ApiService ApiService { get; set; }

    [Parameter]
    public int CourseId { get; set; }

    private Course course = null;
    private MarkupString? pageContent;
    private int currentPageId = 0;
    private System.Diagnostics.Stopwatch _stopwatch = new();

    protected override async Task OnParametersSetAsync()
    {
        var crs = await ApiService.GetCourseByIdAsync(CourseId);
        if (crs != null)
        {
            currentPageId = crs.CurrentPage;
            await LoadPageAsync();
            _stopwatch.Restart();
            course = crs;
        }
    }

    private async Task LoadPageAsync()
    {
        pageContent = null;
        StateHasChanged();
        // Track time spend on each page
        var secondsSpentOnPage = (int)_stopwatch.Elapsed.TotalSeconds;
        var page = await ApiService.GetCoursePageAsync(CourseId, currentPageId, secondsSpentOnPage);
        pageContent = page?.Content != null ? new MarkupString(page.Content) : null;
        _stopwatch.Restart();
    }

    // Track time on page close
    public void Dispose()
    {
        var secondsSpentOnPage = (int)_stopwatch.Elapsed.TotalSeconds;
        _stopwatch.Reset();
        ApiService.GetCoursePageAsync(CourseId, currentPageId, secondsSpentOnPage);
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        currentPageId = newPageNumber;
        await LoadPageAsync();
    }
}
