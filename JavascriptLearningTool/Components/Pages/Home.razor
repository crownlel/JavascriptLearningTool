@page "/"
@rendermode InteractiveServer
@inject UserAuthenticationStateProvider UserAuthenticationStateProvider
@inject NavigationManager Navigation

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <h1>Hello</h1>
        <p>You are not logged in.</p>
    </NotAuthorized>
    <Authorized>
        <h1>Hello, @context.User?.Identity?.Name</h1>

        <div>
            <h3>Daily Progress</h3>
            <BarChart @ref="_dailyChart" Width="1100" Height="400" />
        </div>

        <div>
            <h3>Notifications</h3>
            @if(_notifications != null){
                <ul class="list-group">
                    @foreach (var not in _notifications)
                    {
                        <li class="list-group-item">@not</li>
                    }
                </ul>
            }
            
        </div>

        <div style="position: fixed; bottom: 20px; right: 20px;">
            <button class="btn btn-primary" @onclick="Logout" href>Logout</button>
        </div>
    </Authorized>
</AuthorizeView>
@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Inject]
    public ApiService ApiService { get; set; }

    private BarChart _dailyChart;
    private ChartData _chartData;
    private BarChartOptions _chartOptions = new()
        {
            Responsive = true,
            Interaction = new Interaction { Mode = InteractionMode.Index }
        };

    private List<MarkupString>? _notifications;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await authenticationState.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            // Initialize chart options
            _chartOptions.Scales.X!.Title = new() { Display = true, Text = "Days" };
            _chartOptions.Scales.Y!.Title = new() { Display = true, Text = "Minutes" };

            // Get stats
            await LoadCartsAsync();
            await LoadNotificationsAsync();
        }

        await base.OnInitializedAsync();
    }

    private async Task LoadNotificationsAsync()
    {
        // Calculate user progress
        var questionProgress = await ApiService.GetQuestionProgressAsync();
        if (questionProgress is null) return;

        var courseProgress = questionProgress.GroupBy(x => x.CourseId)
            .OrderBy(x => x.Key)
            .ToDictionary(x => x.Key, x => (decimal)x.Count(y => y.IsCompleted) / x.Count() * 100);
        var notifications = new List<string>();
        if (courseProgress.All(kvp => kvp.Value == 100))
        {
            // Show courses completed message
            notifications.Add(@"Congratulations! You have completed all courses. <br>
                                You can look up those external sources <br>
                                <a href=""https://www.w3schools.com/js"" target=""_blank"">w3schools</a> <br>
                                <a href=""https://www.learn-js.org/"" target=""_blank"">learn-js.org</a>");
        }
        else
        {
            var courses = await ApiService.GetUserCourses();
            var notCompletedCourses = courseProgress.Where(kvp => kvp.Value < 100).Select(kvp => kvp.Key); 
            if (notCompletedCourses.Any())
            {
                notifications.Add($"You have not completed the following courses:<br>" + string.Join(", ", courses.Where(c => notCompletedCourses.Contains(c.Id)).Select(c => c.Name)));

                var lowCourses = courseProgress.Where(kvp => kvp.Value < 60).Select(kvp => kvp.Key);
                if (lowCourses.Any())
                {
                    notifications.Add("You are struggling in the following courses:<br>" + string.Join(", ", courses.Where(c => lowCourses.Contains(c.Id)).Select(c => c.Name)));
                }

                notifications.Add("Hint: You can use focus mode toggle to get more personalized test questions");
            }
        }

        _notifications = notifications.Select(n => new MarkupString(n)).ToList();
    }

    private async Task LoadCartsAsync()
    {
        // Get data
        var dailyActivities = await ApiService.GetDailyActivitiesAsync();
        if (dailyActivities is null) return;

        // Create chart data
        var c = ColorUtility.CategoricalTwelveColors[2].ToColor();
        _chartData = new ChartData
            {
                Labels = dailyActivities.Select(x => x.Key.ToShortDateString()).ToList(),
                Datasets = new List<IChartDataset>
                {
                    new BarChartDataset
                    {
                        Label = "Daily minutes spent on Courses",
                        Data = dailyActivities.Select(x => (double)x.Value / 60).ToList(),
                        BackgroundColor = [ c.ToRgbString() ],
                        BorderColor = [ c.ToRgbString() ],
                        BorderWidth = [1]
                    }
                }
            };

        // Initialize chart data
        StateHasChanged();
        await _dailyChart.InitializeAsync(_chartData, _chartOptions);
    }

    private void Logout()
    {
        UserAuthenticationStateProvider.NotifyChanged(string.Empty);
        Navigation.NavigateTo("login");
    }
}

